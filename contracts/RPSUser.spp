/*
  Implementation of contract RPSUser
 */

pragma ton-solidity >= 0.32.0;

pragma AbiHeader expire;
pragma AbiHeader pubkey;

import "../libraries/RPSBase.sol";
import "../interfaces/IRPSProvider.sol";
import "../interfaces/IRPSCallback.sol";
import "../interfaces/IRPSUser.sol";
import "./MultiWallets.spp";

contract RPSUser is
IRPSUser
, MultiWallets
{
  uint128 constant PREPARE_SUBSCRIBE_COST = 1 ton;
  uint128 constant STOP_SUBSCRIBE_COST = 1 ton;
  uint128 constant PAUSE_SUBSCRIBE_COST = 1 ton;
  uint128 constant UNPAUSE_SUBSCRIBE_COST = 1 ton;
  uint128 constant CONSTRUCTOR_COST = 1 ton;
  uint128 constant FUNCTION_COST = 0.1 ton ;
  
  address static s_root ;
  address static s_owner ;

  mapping ( uint64 => UserSubscription ) g_subscriptions ;
  uint64 g_subscription_counter ;

  function _check_owner( uint128 min_balance ) view
  {
    require(
            msg.sender.value != 0 ?
            msg.sender == s_owner :
            msg.pubkey() == tvm.pubkey(),
            RPSBase.EXN_AUTH_FAILED );
    require( address(this).balance >= min_balance, RPSBase.EXN_NOT_ENOUGH_GAS );
    tvm.accept();
  }

  constructor( ) public {
    _check_owner( FUNCTION_COST );

    _MultiWallets();
  }

  function needWallet ( address token_root ) public
  {
    _check_owner( FUNCTION_COST + DEPLOY_EMPTY_WALLET_COST );
    _need_wallet( token_root );
  }

  function subscribe( address provider,
                      uint32 serv_id,
                      uint8 periods,
                      address callback ) public  override
  {
    require( periods > 0 );
    _check_owner( FUNCTION_COST + PREPARE_SUBSCRIBE_COST );

    RPSBase.Service empty_service;
    UserSubscription sub = UserSubscription(
                                           g_subscription_counter,
                                           provider,
                                           serv_id,
                                           periods,
                                           callback,
                                           empty_service,
                                           RPSBase.Status.Pending,
                                           0, // sub_pid
                                           0  // sub_date
                                           );
    g_subscriptions [ g_subscription_counter ] = sub ;
    g_subscription_counter++;

    IRPSProvider( provider ).
      prepareSubscribe %{sol:gas:PREPARE_SUBSCRIBE_COST} ( sub.sub_uid, serv_id );
  }

  function getSubscriptions() public view override
    returns ( mapping ( uint64 => UserSubscription ) subscriptions )
  {
    subscriptions = g_subscriptions ;
  }

  function clearOldSubscriptions() override public
    returns (UserSubscription[] old_subs)
  {
    for( (uint64 sub_uid, UserSubscription s) : g_subscriptions ){
      if( s.status == RPSBase.Status.Subscribed ){
        if( s.sub_date + s.service.period * s.periods < now ){
          delete g_subscriptions[ sub_uid ];
          old_subs.push( s );
        }
      }
    }
  }

  
  function _get_subscription( uint64 sub_uid )
    internal inline view returns ( UserSubscription sub )
  {
    optional ( UserSubscription ) sub_opt = g_subscriptions.fetch(  sub_uid );
    require( sub_opt.hasValue(), RPSBase.EXN_AUTH_FAILED );
    sub = sub_opt.get() ;
  }

  function continueSubscribe( uint64 sub_uid,
                              RPSBase.Service s,
                              address token_wallet ) public override
  {
    UserSubscription sub = _get_subscription( sub_uid );
    require( sub.provider == msg.sender, RPSBase.EXN_AUTH_FAILED );

    uint128 cost = sub.periods * s.period_cost ;
    uint128 balance = _get_balance( s.token_root );

    if( cost >= balance ){
      _transfer( s.token_root, cost, token_wallet );
      g_subscriptions[ sub.sub_uid ].service = s;
      IRPSProvider( sub.provider ).subscribe%{sol:fwd}(
                                             s_owner,
                                             tvm.pubkey(),
                                             sub_uid,
                                             sub.serv_id,
                                             sub.periods
                                              );
    } else {
      delete g_subscriptions[ sub_uid ];
      _callbackSubscribe( sub,
                          RPSBase.Status.ErrorNotEnoughBalance );
    }
  }

  function _callbackSubscribe( UserSubscription sub, RPSBase.Status status )
    internal pure
  {
    if( sub.callback.value != 0 ){
      IRPSCallback( sub.callback ).
        subscribeStatus %{sol:fwd} (
                        address(this),
                        sub.provider,
                        sub.sub_uid,
                        sub.serv_id,
                        sub.periods,
                        status,
                        sub.sub_date);
    }
  }
  
  function callbackSubscribe( uint64 sub_uid,
                              RPSBase.Status status) public override
  {
    UserSubscription sub = _get_subscription( sub_uid );
    require( sub.provider == msg.sender, RPSBase.EXN_AUTH_FAILED );

    _callbackSubscribe( sub, status );
  }

  function confirmSubscribe( uint64 sub_uid,
                             uint64 sub_pid,
                             uint64 sub_date
                             ) public 
  {
    UserSubscription sub = _get_subscription( sub_uid );
    require( sub.provider == msg.sender, RPSBase.EXN_AUTH_FAILED );

    sub.sub_pid = sub_pid ;
    sub.sub_date = sub_date ;
    sub.status = RPSBase.Status.Subscribed;
    g_subscriptions[ sub.sub_uid ] = sub ;
    _callbackSubscribe( sub, sub.status );
  }

  function stopSubscribe( uint64 sub_uid ) public override view {
    _check_owner( FUNCTION_COST + STOP_SUBSCRIBE_COST );
    
    UserSubscription sub = _get_subscription( sub_uid );
    IRPSProvider( sub.provider ).
      stopSubscribe%{sol:gas:STOP_SUBSCRIBE_COST}( sub_uid, sub.sub_pid );
  }

  function stoppedSubscribe( uint64 sub_uid,
                             uint8 periods,
                             uint64 sub_date ) public
  {
    UserSubscription sub = _get_subscription( sub_uid );
    require( sub.provider == msg.sender, RPSBase.EXN_AUTH_FAILED );
    
    sub.periods = periods ;
    sub.sub_date = sub_date ;
    g_subscriptions[ sub.sub_uid ] = sub ;
    _callbackSubscribe( sub, RPSBase.Status.Stopped);
  }

  function pauseSubscribe( uint64 sub_uid ) public override view {
    _check_owner( FUNCTION_COST + PAUSE_SUBSCRIBE_COST );
    
    UserSubscription sub = _get_subscription( sub_uid );
    IRPSProvider( sub.provider ).
      pauseSubscribe%{sol:gas:PAUSE_SUBSCRIBE_COST}( sub_uid, sub.sub_pid );
  }

  function pausedSubscribe( uint64 sub_uid,
                            uint8 periods,
                            uint64 consumed ) public
  {
    UserSubscription sub = _get_subscription( sub_uid );
    require( sub.provider == msg.sender, RPSBase.EXN_AUTH_FAILED );
    
    sub.status = RPSBase.Status.Paused ;
    sub.sub_date = consumed ;
    sub.periods = periods ;
    g_subscriptions[ sub_uid ] = sub ;
    _callbackSubscribe( sub, sub.status);
  }

  function unpauseSubscribe( uint64 sub_uid ) public override view {
    _check_owner( FUNCTION_COST + UNPAUSE_SUBSCRIBE_COST );
    
    UserSubscription sub = _get_subscription( sub_uid );
    // TODO: check that subscription is currently paused
    IRPSProvider( sub.provider ).
      unpauseSubscribe%{sol:gas:UNPAUSE_SUBSCRIBE_COST}( sub_uid, sub.sub_pid );
  }

  function unpausedSubscribe( uint64 sub_uid,
                              uint8 periods,
                              uint64 sub_date ) public
  {
    UserSubscription sub = _get_subscription( sub_uid );
    require( sub.provider == msg.sender, RPSBase.EXN_AUTH_FAILED );
    sub.status = RPSBase.Status.Subscribed ;
    sub.sub_date = sub_date ;
    sub.periods = periods ;
    g_subscriptions[ sub_uid ] = sub ;
    _callbackSubscribe( sub, RPSBase.Status.Unpaused );
  }
  
}

