pragma ton-solidity >=0.35.0;

#include "lib/cpp.sol"

pragma AbiHeader expire;
pragma AbiHeader time;
pragma AbiHeader pubkey;

import "lib/Debot.sol";
import "lib/Terminal.sol";
import "lib/AddressInput.sol";
import "lib/AmountInput.sol";
import "lib/ConfirmInput.sol";
import "lib/Sdk.sol";
import "lib/Menu.sol";
import "lib/Upgradable.sol";
import "lib/Transferable.sol";

import "lib/Utility.sol";
import "interfaces/IMultisig.sol";
import "../contracts/RPSRoot.spp";

contract RPSUserDebot is Debot, Upgradable, Transferable, Utility {

  DEBOT_NAME("RPSUserDebot",
        "OCamlPro",
        "Debot for Users to use RPS",
        "Fabrice LE FESSANT");
  DEBOT_VERSION(1,0,0);
  // your address with 0x instead of 0:
  DEBOT_SUPPORT(
                0x66e01d6df5a8d7677d9ab2daf7f258f1e2a7fe73da5320300395f99e01dc3b5f );
  
  DEBOT_HELLO(
    "Hi, I will help you work with RPS contracts"
              );

  function _onHasPubkey() internal
  {
    PRINT("Getting User Contract address");
    IRPSRoot( g_root ).getUserAddress
      MSGINT( onHasUserAddress, onErrorRestart )
      ( g_pubkey, address(0) );
  }

  address g_user;
  function onHasUserAddress( address user ) public
  {
    g_user = user ;
    _checkUserContractStatus();
  }

  function _checkUserContractStatus() internal
  {
    PRINTF("Checking status of User Contract: {}", g_user);
    Sdk.getAccountType(
                       F_(checkUserContractStatus),
                       g_user);
  }

  function checkUserContractStatus( int8 acc_type ) public
  {
    PRINTF("User Contract status: {}", acc_type);
    if( acc_type == 1 ){
      mainMenu();
    } else {
      PRINTF("User Contract {} not deployed yet.", g_user);
      checkPubkeyBalanceBeforeDeploy();
    }
  }

  function checkPubkeyBalanceBeforeDeploy() public view
  {
    IRPSRoot( g_root ).getBalance
      MSGINT(onPubkeyBalanceBeforeDeploy,onErrorRestart)
      ( g_pubkey );
  }

  function onPubkeyBalanceBeforeDeploy( uint128 nanotokens ) public
  {
    PRINTF("Pubkey balance on Root Contract: {}", tonsToStr( nanotokens ));
    if( nanotokens >= 2.1 ton){
      _deployUserContract();
    } else {
      MENU(
           MENU_ITEM( "Send 3 tons from multisig", creditBalanceForDeploy );
           MENU_ITEM( "Check balance again", checkPubkeyBalanceBeforeDeploy );
           );
    }
  }

  function creditBalanceForDeploy() view public
  {
    TvmCell payload = tvm.encodeBody( IRPSRoot.creditBalance,
                                      uint256(g_pubkey) );
    IMultisig( g_multisig ).sendTransaction
      MSGEXT(g_pubkey,checkPubkeyBalanceBeforeDeploy,onErrorRestart)
    (g_root, 3 ton, true, 0, payload);
  }

  function _deployUserContract() internal
  {
   PRINT("Deploying User Contract");
    IRPSRoot( g_root ).deployUser
      MSGEXT( g_pubkey, onDeployedUserContract, onErrorRestart)();
  }
  
  function onDeployedUserContract( address  ) public
  {
    _checkUserContractStatus();
  }
  
  function mainMenu() public {
    Sdk.getBalance( F_( mainMenuWithBalance ), g_user );
  }

  mapping ( uint64 => IRPSUser.UserSubscription ) g_subscriptions ;
  uint128 g_balance ;
  
  function mainMenuWithBalance( uint128 nanotokens ) public
  {
    g_balance = nanotokens ;
    IRPSUser( g_user ).getSubscriptions
      MSGINT( mainMenuWithSubscriptions, onErrorRestart) () ;
  }
  
  function mainMenuWithSubscriptions
    (
     mapping ( uint64 => IRPSUser.UserSubscription ) subscriptions 
     ) public
  {
    g_subscriptions = subscriptions ;
    PRINTF("User Contract balance: {} ton", tonsToStr( g_balance ));
    for( (uint64 sub_uid, IRPSUser.UserSubscription sub) : g_subscriptions ){
      PRINTF("{}: subscribed to {}", sub_uid, sub.service.name);
    }
    
    MENU(
         MENU_ITEM ( "Subscribe to a service", subscribe) ;
         MENU_ITEM ( "Stop subscription", stopSubscription );
         MENU_ITEM ( "Pause subscription", pauseSubscription );
         MENU_ITEM ( "Unpause subscription", unpauseSubscription );
         );
  }

  function subscribe() public
  {
    // TODO
    // ask Provider address
    // list Available services
    // Query service number
    // Query number of periods
    mainMenu();
  }

  function stopSubscription() public
  {
    // TODO
    // ask sub_uid
    // check state
    // send message
    mainMenu();
  }

  function pauseSubscription() public
  {
    // TODO
    // ask sub_uid
    // check state
    // send message
    mainMenu();
  }

  function unpauseSubscription() public
  {
    // TODO
    // ask sub_uid
    // check state
    // send message
    mainMenu();
  }
  
  function onErrorMenu(uint32 sdkError, uint32 exitCode) public {
    PRINTF("Error: sdkError:{} exitCode:{}", sdkError, exitCode);
    mainMenu();
  }

  
  #include "RootContractMethods.sol"
  #include "lib/StdMethods.sol"
  
}
