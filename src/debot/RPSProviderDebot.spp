pragma ton-solidity >=0.35.0;

#include "lib/cpp.sol"

pragma AbiHeader expire;
pragma AbiHeader time;
pragma AbiHeader pubkey;

import "lib/Debot.sol";
import "lib/Terminal.sol";
import "lib/AddressInput.sol";
import "lib/AmountInput.sol";
import "lib/ConfirmInput.sol";
import "lib/Sdk.sol";
import "lib/Menu.sol";
import "lib/Upgradable.sol";
import "lib/Transferable.sol";

import "lib/Utility.sol";
import "interfaces/IMultisig.sol";
import "../contracts/RPSProvider.spp";
import "../contracts/RPSRoot.spp";

contract RPSProviderDebot is Debot, Upgradable, Transferable, Utility {

  DEBOT_NAME("RPSProviderDebot",
        "OCamlPro",
        "Debot for Service Providers to use RPS",
        "Fabrice LE FESSANT");
  DEBOT_VERSION(1,0,0);
  // your address with 0x instead of 0:
  DEBOT_SUPPORT(
                0x66e01d6df5a8d7677d9ab2daf7f258f1e2a7fe73da5320300395f99e01dc3b5f );
  
  DEBOT_HELLO(
    "Hi, I will help you work with RPS contracts"
              );

  TvmCell g_provider_code ;
  address g_provider ;

  function _onHasPubkey() internal {
    PRINT("Getting provider code");
    IRPSRoot( g_root ).getProviderCode
      MSGINT(onHasProviderCode,onErrorRestart) ();
  }

  function onHasProviderCode( TvmCell provider_code ) public
  {
    PRINT("Provider code received");
    g_provider_code = provider_code ;
    _onHasProviderCode();
  }
  
  function _onHasProviderCode() internal
  {
    TvmCell stateInit = tvm.buildStateInit({
      contr: RPSProvider,
          varInit: {
            s_root : g_root,
            s_owner : address(0),
            },
          pubkey: g_pubkey,
          code: g_provider_code
        });
    g_provider = address( tvm.hash( stateInit ) );
    PRINTF("Checking status of provider contract: {}", g_provider);
    Sdk.getAccountType(
                       F_(checkProviderContractStatus),
                       g_provider);
  }
  
  function checkProviderContractStatus(int8 acc_type) public {
    PRINTF("Provider contract status: {}", acc_type);
    if( acc_type == 1 ){
      _mainMenu();
    } else {
      PRINTF("Contract {} not deployed yet.", g_provider);
      _checkProviderBalanceBeforeDeploy();
    }
  }

  function checkProviderBalanceBeforeDeploy() view public
  {
    _checkProviderBalanceBeforeDeploy();
  }
  
  function _checkProviderBalanceBeforeDeploy() view internal
  {
    IRPSRoot( g_root ).getBalance
      MSGINT(onProviderBalanceBeforeDeploy,onErrorRestart)
      ( g_pubkey );
  }

  function onProviderBalanceBeforeDeploy( uint128 nanotokens ) public
  {
    PRINTF("Provider balance: {}", tonsToStr( nanotokens ));
    if( nanotokens >= 2.1 ton){
      _deployProviderContract();
    } else {
      MENU(
           MENU_ITEM( "Send 3 tons from multisig", creditBalanceForDeploy );
           MENU_ITEM( "Check balance again", checkProviderBalanceBeforeDeploy );
           );
    }
  }

  function creditBalanceForDeploy() view public
  {
    TvmCell payload = tvm.encodeBody( IRPSRoot.creditBalance,
                                      uint256(g_pubkey) );
    IMultisig( g_multisig ).sendTransaction
      MSGEXT(g_pubkey,checkProviderBalanceBeforeDeploy,onErrorRestart)
    (g_root, 3 ton, true, 0, payload);
  }

  function _deployProviderContract() internal
  {
    PRINT("Deploying provider contract");
    IRPSRoot( g_root ).deployProvider
      MSGEXT( g_pubkey, onDeployedProviderContract, onErrorRestart)();   
  }

  function onDeployedProviderContract( address  ) public
  {
    PRINTF("Checking status of provider contract: {}", g_provider);
    Sdk.getAccountType(
                       F_(checkProviderContractStatus2),
                       g_provider);
  }

  function checkProviderContractStatus2(int8 acc_type)
  {
    if( acc_type == 1 ){
      _mainMenu();
    } else {
      PRINTF("Provider Contract {} not yet deployed...", g_provider);
      ConfirmInput.get(_F(checkProviderContractStatus2),
                       "Test again ?");
    }
  }

  function mainMenu() public
  {
    _mainMenu();
  }
  
  function _mainMenu() internal {
    Sdk.getBalance( F_( mainMenuWithBalance ), g_provider );
  }

  function mainMenuWithBalance( uint128 nanotokens ) public
  {
    PRINTF("Provider contract balance: {} ton", tonsToStr( nanotokens ));
    MENU(
         MENU_ITEM ( "List existing services", listServices) ;
         MENU_ITEM ( "Publish new service", publishService) ;
         MENU_ITEM ( "Claim subscriptions", claimSubscriptions );
         MENU_ITEM ( "List claimed subscriptions", listClaimedSubscriptions );
         MENU_ITEM ( "Transfer claimed subscriptions",
                     transferClaimedSubscriptions );
         MENU_ITEM( "List subscriptions", listSubscriptions );
         );
  }

  function transferClaimedSubscriptions() public view
  {
    IRPSProvider( g_provider ).transferClaimed
      MSGEXT( g_pubkey, mainMenu, onErrorRestart )
      ( address(0), g_multisig ) ;
  }
  
  function claimSubscriptions() public view
  {
    IRPSProvider( g_provider ).claimSubscriptions
      MSGEXT( g_pubkey, onClaimedSubscriptions, onErrorRestart ) () ;
  }

  function listClaimedSubscriptions() public view
  {
    IRPSProvider( g_provider ).getClaimedSubscriptions
      MSGINT( onClaimedSubscriptions, onErrorRestart ) () ;
  }

  function onClaimedSubscriptions( mapping( address => uint128 ) claimed )
    public
  {
    for( (address root_token, uint128 balance ) : claimed ){
      if( root_token == address(0) ){
        PRINTF("Claimed {} ton", tonsToStr(balance) );
      } else {
        PRINTF("Claimed {} for root_token {}", balance, root_token );
      }
    }
    _mainMenu();
  }
  
  mapping( uint32 => RPSProvider.ProviderService ) g_services ;
  
  function listServices() view public
  {
    IRPSProvider( g_provider ).getServices
      MSGINT(onGetServices, onErrorRestart)
      ();
  }

  function onGetServices(
                         mapping( uint32 => RPSProvider.ProviderService )
                         services ) public
  {
    g_services = services ;

    uint32 counter = 0;
    MAP_ITER(g_services, serv_id, uint32, serv, RPSProvider.ProviderService,
             counter++;
             RPSBase.Service service = serv.service;
             PRINTF("{}: name='{}' period={} cost/period={}",
                    serv_id, service.name, service.period, service.period_cost);
             );
    _mainMenu();
  }

  function publishService() public
  {
    _askServiceName();
  }

  RPSBase.Service g_service ;
  QUERY_STRING_FUNCTION(_askServiceName, "Enter Service Name:", value,
                          if( value == "" ){
                          _askServiceName();
                        } else {
                          g_service.name = value;
                          _askServicePeriod();
                        }
                        )

  QUERY_UINT256_FUNCTION(_askServicePeriod,
                         "Enter Service Period in seconds (1 day=86400):",
                         period,
                         g_service.period = uint64(period);
                         _askServiceCost();
                        )

  QUERY_UINT256_FUNCTION(_askServiceCost,
                         "Enter Cost per Period (in nanotons):",
                         cost,
                         g_service.period_cost = uint128(cost);
                         _addService();
                        )

    address g_callback ; // No callback for debot
    function _addService() public
    {
      PRINT("Adding Service on-chain");
      IRPSProvider( g_provider ).addService
        MSGEXT( g_pubkey, mainMenu, onErrorRestart )
        ( g_service, g_callback) ;
    }

    function listSubscriptions() public
    {
      // TODO
    }
    
#include "RootContractMethods.sol"
#include "lib/StdMethods.sol"
}
