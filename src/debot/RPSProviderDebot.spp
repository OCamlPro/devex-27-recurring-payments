pragma ton-solidity >=0.35.0;

#include "cpp.sol"

pragma AbiHeader expire;
pragma AbiHeader time;
pragma AbiHeader pubkey;

import "lib/Debot.sol";
import "lib/Terminal.sol";
import "lib/AddressInput.sol";
import "lib/AmountInput.sol";
import "lib/ConfirmInput.sol";
import "lib/Sdk.sol";
import "lib/Menu.sol";
import "lib/Upgradable.sol";
import "lib/Transferable.sol";

import "Utility.sol";

import "../contracts/RPSProvider.spp";
import "../contracts/RPSRoot.spp";

// Interface of the contract with which to interact

interface IContract {
  function setter ( uint256 x ) external ;
  function getter () external returns ( uint256 y ) ;
}

contract RPSProviderDebot is Debot, Upgradable, Transferable, Utility {

  string constant debot_name = "RPSDebot" ;
  string constant debot_publisher = "My Software Company" ;
  string constant debot_caption = "Debot of RPS contracts" ;
  string constant debot_author = "My Software Company" ;
  string constant debot_language = "en" ;
  // your address with 0x instead of 0:
  uint8 constant debot_version_major = 1 ;
  uint8 constant debot_version_minor = 0 ;
  uint8 constant debot_version_fix = 0 ;
  uint256 constant debot_support =
    0x66e01d6df5a8d7677d9ab2daf7f258f1e2a7fe73da5320300395f99e01dc3b5f ;
  
  string constant debot_hello =
    "Hi, I will help you work with RPS contracts";

  TvmCell g_provider_code ;
  address g_provider ;

  function _onHasPubkey() internal {
    Terminal.print(0, "Getting provider code");
    RPSRoot( g_root ).getProviderCode
      MSGINT(onHasProviderCode,onErrorRestart) ();
  }

  function onHasProviderCode( TvmCell provider_code ) public
  {
    Terminal.print(0, "Provider code received");
    g_provider_code = provider_code ;
    _onHasProviderCode();
  }
  
  function _onHasProviderCode() internal
  {
    TvmCell stateInit = tvm.buildStateInit({
      contr: RPSProvider,
          varInit: {
            s_root : g_root,
            s_owner : address(0),
            },
          pubkey: g_pubkey,
          code: g_provider_code
        });
    g_provider = address( tvm.hash( stateInit ) );
    PRINTF("Checking status of provider contract: {}", g_provider);
    Sdk.getAccountType(
                       F_(checkProviderContractStatus),
                       g_provider);
  }
  
  function checkProviderContractStatus(int8 acc_type) public {
    PRINTF("Provider contract status: {}", acc_type);
    if( acc_type == 1 ){
      _mainMenu();
    } else {
      PRINTF("Contract {} not deployed yet.", g_provider);
      _checkProviderBalanceBeforeDeploy();
    }
  }

  function checkProviderBalanceBeforeDeploy() view public
  {
    _checkProviderBalanceBeforeDeploy();
  }
  
  function _checkProviderBalanceBeforeDeploy() view internal
  {
    // Sdk.getBalance( F_( onProviderBalanceBeforeDeploy ),
    //                g_provider );
    RPSRoot( g_root ).getBalance
      MSGINT(onProviderBalanceBeforeDeploy,onErrorRestart)
      ( g_pubkey );
  }

  function onProviderBalanceBeforeDeploy( uint128 nanotokens ) public
  {
    PRINTF("Provider balance: {}", tonsToStr( nanotokens ));
    if( nanotokens >= 1.8 ton){
      _deployProviderContract();
    } else {
      MenuItem[] items;
      items.push( MenuItem("Send 2 tons from multisig", "",
                         _F(creditBalanceForDeploy)) );
      items.push( MenuItem("Check balance again", "",
                         _F(checkProviderBalanceBeforeDeploy)) );
      Menu.select("What's next?", "", items);
    }
  }

  function creditBalanceForDeploy() view public
  {
    TvmCell payload = tvm.encodeBody( IRPSRoot.creditBalance,
                                      uint256(g_pubkey) );
    IMultisig( g_multisig ).sendTransaction
      MSGEXT(g_pubkey,checkProviderBalanceBeforeDeploy,onErrorRestart)
    (g_root, 2 ton, true, 0, payload);
  }

  function _deployProviderContract() internal
  {
    PRINT("Deploying provider contract");
    RPSRoot( g_root ).deployProvider
      MSGEXT( g_pubkey, onDeployedProviderContract, onErrorRestart)();   
  }

  function onDeployedProviderContract( address  ) public
  {
    PRINTF("Checking status of provider contract: {}", g_provider);
    Sdk.getAccountType(
                       F_(checkProviderContractStatus2),
                       g_provider);
  }

  function checkProviderContractStatus2(int8 acc_type)
  {
    if( acc_type == 1 ){
      _mainMenu();
    } else {
      PRINTF("Provider Contract {} not yet deployed...", g_provider);
      ConfirmInput.get(_F(checkProviderContractStatus2),
                       "Test again ?");
    }
  }
  
  function _mainMenu() internal {
    PRINTF("Provider Contract {} ok.", g_provider);
    _askRootContractAddress();
  }

#include "RootContractMethods.sol"
#include "StdMethods.sol"
}
