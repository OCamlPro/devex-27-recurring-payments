/*
  Implementation of contract RPSProvider
  TODO:
  * emit events
  * allow provider to stop new subscriptions on a service
  * allow provider to stop new subscriptions on all services
  * add subscription_cost
  * add max_periods
 */

/* Invariant:
 * * the sub.sub_date is the beginning of the last claimed period. The next
 *   unclaimed period is sub.sub_date + service.period
 * * periods is the number of unclaimed periods minus one
 */

pragma ton-solidity >= 0.32.0;

pragma AbiHeader expire;
pragma AbiHeader pubkey;

import "../libraries/RPSBase.sol";
import "./MultiWallets.spp";
import "../interfaces/IRPSProvider.sol";
import "../interfaces/IRPSUser.sol";
import "../interfaces/IRPSCallback.sol";
import "./RPSUser.spp";

contract RPSProvider is
IRPSProvider
, MultiWallets
{  
  uint128 constant CALLBACK_COST = 0.8 ton;
  uint128 constant CONSTRUCTOR_COST = 1 ton;
  uint128 constant FUNCTION_COST = 0.1 ton ;

  address static s_root ;
  address static s_owner ;

  mapping(uint32 => ProviderService) g_services ; // serv_id => serv
  mapping(uint32 => address) g_callbacks ; // serv_id => callback
  uint32 g_service_counter;

  mapping(uint64 => ProviderSubscription) g_subscriptions ; // sub_pid => sub
  uint64 g_subscription_counter;

  mapping(address => uint32) g_subscribers; // subscriber => nbr_subscriptions
  mapping(address => uint128) g_token_claimed; // token => claimed balance

  TvmCell g_user_code;

  function _check_owner( uint128 min_balance ) view
  {
    require(
            msg.sender.value != 0 ?
            msg.sender == s_owner :
            msg.pubkey() == tvm.pubkey(),
            RPSBase.EXN_AUTH_FAILED );
    require( address(this).balance >= min_balance, RPSBase.EXN_NOT_ENOUGH_GAS );
    tvm.accept();
  }

  constructor( TvmCell user_code ) public {
    _check_owner( CONSTRUCTOR_COST );

    g_user_code = user_code ;
    _MultiWallets();
  }

  function newService( RPSBase.Service service, address callback ) public
  {
    _check_owner( FUNCTION_COST + DEPLOY_EMPTY_WALLET_COST );

    uint32 serv_id = g_service_counter ;
    g_service_counter++;

    ProviderService serv =
      ProviderService(
                      serv_id,
                      service
                      );
    g_services[ serv_id ] = serv ;
    g_callbacks[ serv_id ] = callback ;

    _need_wallet( service.token_root );
  }

  function getServices() public view responsible override
    returns ( mapping( uint32 => ProviderService ) services )
  {
    services = g_services ;
  }

  function prepareSubscribe(
                            uint64 sub_uid,
                            uint32 serv_id )
    public override view
  {
    optional(ProviderService) s_opt = g_services.fetch( serv_id );
    if( s_opt.hasValue() ){
      ProviderService serv = s_opt.get();
      RPSBase.Service service = serv.service;
      address token_wallet = _get_wallet( service.token_root ) ;
      if( token_wallet.value == 0 ){
        IRPSUser( msg.sender ).
          callbackSubscribe %{sol:fwd}
        (
         sub_uid, 
         RPSBase.Status.ErrorServiceNotReady
           );
      } else {
        IRPSUser( msg.sender ).
          continueSubscribe %{sol:fwd} ( sub_uid, service, token_wallet );
      }
    } else {
      IRPSUser( msg.sender ).
        callbackSubscribe %{sol:fwd} ( sub_uid, 
                         RPSBase.Status.ErrorNoSuchService);
    }
  }

  function subscribe(
                     address owner,
                     uint256 pubkey,
                     uint64 sub_uid,
                     uint32 serv_id,
                     uint8 periods ) public override
  {
    address user = msg.sender ;
    optional( uint32 ) nbr_subscriptions_opt = g_subscribers.fetch( user );
    if( ! nbr_subscriptions_opt.hasValue() ){
      address addr = _computeRPSUserAddress( s_root, owner, pubkey );
      require ( addr == user, RPSBase.EXN_AUTH_FAILED );
      g_subscribers[ user ] = 1;
    } else {
      g_subscribers[ user ] = nbr_subscriptions_opt.get() + 1 ;
    }

    uint64 sub_date = now;
    RPSBase.Status status = RPSBase.Status.Subscribed;
    uint64 sub_pid = g_subscription_counter;
    g_subscription_counter++;

    ProviderSubscription sub =
      ProviderSubscription(
                           sub_pid ,
                           sub_uid ,
                           serv_id ,
                           periods ,
                           user ,
                           status,
                           sub_date
                           );
    ProviderService serv = g_services[ serv_id ];
    RPSBase.Service service = serv.service;

    g_token_claimed[ service.token_root ] += service.period_cost ;
    _callbackSubscribe( sub, status );
    RPSUser( user ).confirmSubscribe%{sol:fwd}( sub_uid, sub_pid, sub_date );
  }

  function _callbackSubscribe( ProviderSubscription sub, RPSBase.Status status )
    internal 
  {
    g_subscriptions[ sub.sub_pid ] = sub;
    address callback = g_callbacks[ sub.serv_id ];
    if( callback.value != 0 ){
      IRPSCallback( callback ).subscribeStatus%{sol:gas:CALLBACK_COST}
      ( sub.user, address(this), sub.sub_pid, sub.serv_id,
        sub.periods, status, sub.sub_date );
    }
  }

  function _computeRPSUserAddress( address root,
                                   address owner,
                                   uint256 pubkey ) internal view
    returns (address addr )
  {
    TvmCell stateInit = tvm.buildStateInit({
      contr: RPSUser,
          varInit: {
            s_root : root,
            s_owner : owner,
            },
          pubkey: pubkey,
          code: g_user_code
        });

    addr = address( tvm.hash( stateInit ) );
  }

  function _updateSubscription( ProviderSubscription sub )
    internal returns ( ProviderSubscription ) {
    if( sub.status == RPSBase.Status.Subscribed ){
      uint64 date = now ;
      ProviderService serv = g_services[ sub.serv_id ];
      RPSBase.Service service = serv.service;
      bool expired = false;
      bool modified = false;
      while( !expired && sub.sub_date + service.period < date ){
        sub.sub_date += service.period;
        sub.periods --;
        modified = true;
        if( sub.periods > 0 ){
          g_token_claimed[ service.token_root ] += service.period_cost ;
        } else {
          expired = true ;
        }
      }
      
      if( expired ){
        delete g_subscriptions[ sub.sub_pid ];
        uint32 nbr_subscriptions = g_subscribers[ sub.user ];
        if( nbr_subscriptions == 1 ){
          delete g_subscribers[ sub.user ];
        } else {
          g_subscribers[ sub.user ] = nbr_subscriptions - 1;
        }
      } else
        if( modified ){
          g_subscriptions[ sub.sub_pid ] = sub;
        }
    }
    return sub;
  }
  
  function claimSubscriptions() public
    returns ( mapping( address => uint128 ) claimed )
  {
    // _check_owner();
    optional( uint64, ProviderSubscription ) opt =
      g_subscriptions.min();
    while( opt.hasValue() ){
      ( uint64 sub_pid, ProviderSubscription sub ) = opt.get();

      _updateSubscription( sub );
      opt = g_subscriptions.next( sub_pid );
    }
    claimed = g_token_claimed;
  }

  function transferClaimed( address token_root, address dest_wallet ) public
  {
    _check_owner( FUNCTION_COST + TRANSFER_COST );
    uint128 amount = g_token_claimed[ token_root ];
    _transfer( token_root, amount, dest_wallet );
    delete g_token_claimed[ token_root ] ;
  }

  function _get_subscription( uint64 sub_uid, uint64 sub_pid ) internal
    returns ( bool found, ProviderSubscription sub ) {
    optional( ProviderSubscription ) sub_opt = g_subscriptions.fetch( sub_pid );
    found = sub_opt.hasValue() ;

    if( found ){
      sub = sub_opt.get();
      require ( msg.sender == sub.user, RPSBase.EXN_AUTH_FAILED );
      sub = _updateSubscription( sub );
      found = ( sub.periods > 0 );
    }
    if( !found){
      RPSUser( msg.sender ).callbackSubscribe %{sol:fwd}
      ( sub_uid, RPSBase.Status.ErrorSubscriptionFinished );
    }
  }

  function stopSubscribe( uint64 sub_uid, uint64 sub_pid ) public override {
    (bool found, ProviderSubscription sub) =
      _get_subscription( sub_uid, sub_pid );
    if( found ){
      uint8 stopped_periods = 0;
      if( sub.periods > 1 ){
        stopped_periods = sub.periods - 1;
        sub.periods = 1;
        // Stopped is sent, but status is still Subscribed
        _callbackSubscribe( sub, RPSBase.Status.Stopped);
      }
      RPSUser( msg.sender ).
        stoppedSubscribe%{sol:fwd}( sub_uid, sub.periods, sub.sub_date );
    }
  }
    
  function pauseSubscribe( uint64 sub_uid, uint64 sub_pid ) public override {
    (bool found, ProviderSubscription sub) =
      _get_subscription( sub_uid, sub_pid );
    if( found ){
      if( sub.status == RPSBase.Status.Subscribed ){
        sub.status = RPSBase.Status.Paused ;
        sub.sub_date = now - sub.sub_date ; // consumed time
        _callbackSubscribe( sub, sub.status );
        RPSUser( msg.sender ).
          pausedSubscribe( sub_uid, sub.periods, sub.sub_date );
      } else {
        RPSUser( msg.sender ).
          callbackSubscribe( sub_uid, RPSBase.Status.ErrorAlreadyPaused );
      }
    }
  }

  function unpauseSubscribe( uint64 sub_uid, uint64 sub_pid ) public override {
    (bool found, ProviderSubscription sub) =
      _get_subscription( sub_uid, sub_pid );
    if( found ){
      if( sub.status == RPSBase.Status.Paused ){
        sub.status = RPSBase.Status.Subscribed ;
        sub.sub_date = now - sub.sub_date ;
        _callbackSubscribe( sub, RPSBase.Status.Unpaused );
        RPSUser( msg.sender ).
          pausedSubscribe( sub_uid, sub.periods, sub.sub_date );
      } else {
        RPSUser( msg.sender ).
          callbackSubscribe( sub_uid, RPSBase.Status.ErrorNotPaused );
      }
    }
  }

}

